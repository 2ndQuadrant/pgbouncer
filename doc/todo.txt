= PgBouncer TODO list =

== next release - 1.2 ==

=== done ===

 * use aatree for user lookup
 * use slab allocator for memory management.
 * use standard int types: uint*_t
 * logging to syslog
 * fake parameters to SHOW/SET to allow psycopg to connect to console.
 * various correctness fixes

=== todo ===

 * removing db from config and reload; should work - kill connections
 * removing user should work - kill connections
 * suspend_timeout - drop stalled conns, long logins
 * when dest db does not exists, stalled logins can halt suspend
   fix with suspend_timeout?
 * some preliminary notification that fd limit is full
 * SHOW TOTALS that shows stats summary (as goes to log) plus mem usage.
 * new states for clients: idle and in-query.  That allows to apply
   client_idle_timeout and query_timeout without walking all clients
   on maintenance time.
 * ..hopefully.. make -R less scary
 * ..maybe.. make plan cache work

== Minor features ==

 * drop_on_error/keep_on_error - if released conn is in error state,
   then issue rollback and keep it
 * show stalled; command - like show sockets; but filter only active ones

 * keep stats about error counts
 * auth_conn - access to pg_shadow, so auth_file is not needed
 * units for config parameters.
 * cleanup of logging levels, to make log more useful
 * decrease list walking
 * survive errors from libevent event_del()
 * to test:
   - signal flood
   - no mem / no fds handling

== Dubious/complicated features ==

=== prepared plans ===

 * keeping track of protocol-level prepared plans
   - JDBC workaround in the meantime: protocolVersion=2

=== make -R less scary ===

 * -R should somehow log whats happens
 * -R should detect that no pooler is running and boot normally
 * -R should detect if login fails then exit()
 * Details:
   - Takeover before fork()
   - must not touch libevent, just fill structures,
     libevent init after fork()
   - ^C while takeover - immidiate _exit()
 * Detect existing process:
   - if tcp - try binding
   - if unix - try connect()

=== load-balancing ===

 * allow serveral server to serve one db
   - possibility to specify failover databases.
 * as the result would be less featureful than HAProxy,
   seems pointless.

=== SMP awareness ===

 * spread sockets over per-cpu threads.  needs confirmation that
   single-threadedness can be problem.  it can also be that only
   accept() + login handling of short connection is problem.
   that could be solved by just having threads for login handling,
   which would be lot simpler.  or just deciding that its not
   worth fixing.

