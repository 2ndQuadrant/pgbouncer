= PgBouncer TODO list =

== next release - 1.2 ==

=== done ===

 * use aatree for user lookup
 * use slab allocator for memory management.
 * use standard int types: uint*_t
 * logging to syslog
 * fake parameters to SHOW/SET to allow psycopg to connect to console.
 * various correctness fixes
 * various code cleanups
 * Less scary online restart (-R)
   - Move FD loading before fork, so it logs to console and can be canceled by ^C
   - Keep SHUTDOWN after fork, so ^C would be safe
   - A connect() is attempted to unix socket to see if anyone is listening.
 * suspend_timeout - drop stalled conns, long logins
 * when error logging to dest db, notify clients.
 * SHOW TOTALS that shows stats summary (as goes to log) plus mem usage.
 * removing db from config and reload; works - kill connections
 * SHOW ACTIVE_SOCKETS - like show sockets; but filter only active ones
 * Per-database connect_query (Teodor Sigaev).

== Minor features ==

 * removing user should work - kill connections
 * keep stats about error counts
 * cleanup of logging levels, to make log more useful
 * to test:
   - signal flood
   - no mem / no fds handling
 * new states for clients: idle and in-query.  That allows to apply
   client_idle_timeout and query_timeout without walking all clients
   on maintenance time.

== Dubious/complicated features ==

 * units for config parameters.
 * some preliminary notification that fd limit is full
 * Move all "look-at-full-packet" situtations to SBUF_EV_PKT_CALLBACK
 * maybe libevent calls should look at errno? (esp. event_del())
 * auth_conn - access to pg_shadow, so auth_file is not needed
 * drop_on_error/keep_on_error - if released conn is in error state,
   then issue rollback and keep it

=== prepared plans ===

 * keeping track of protocol-level prepared plans
   - JDBC workaround in the meantime: protocolVersion=2

=== load-balancing ===

 * allow serveral server to serve one db
   - possibility to specify failover databases.
 * seems pointless - result would be less featureful HAProxy

=== SMP awareness ===

 * spread sockets over per-cpu threads.  needs confirmation that
   single-threadedness can be problem.  it can also be that only
   accept() + login handling of short connection is problem.
   that could be solved by just having threads for login handling,
   which would be lot simpler.  or just deciding that its not
   worth fixing.

